#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      DEFAULT_TESTING = (yes no)
#      HOTBACKUP_TESTING = (yes no)
#      TOKUDB_ENGINES_MTR = (yes no)
#      MTR_ARGS
#      MTR_REPEAT
#      DOCKER_OS

set -o errexit
set -o xtrace

WORKDIR_ABS=$(cd ${1:-./build}; pwd -P)
rm -fr ${WORKDIR_ABS}/PS
mkdir -p ${WORKDIR_ABS}/PS
tar -C ${WORKDIR_ABS}/PS --strip-components=1 -zxpf $(ls $WORKDIR_ABS/*.tar.gz | head -1)
cd ${WORKDIR_ABS}/PS/mysql-test
TESTCASE_TIMEOUT=30
#
# CentOS 6 and 7
if [[ -f /opt/rh/devtoolset-7/enable ]]; then
    source /opt/rh/devtoolset-7/enable
fi

# Centos 6/i386
if [[ $(rpm --eval %_arch) = "i386" ]] && [[ -f /opt/rh/devtoolset-2/enable ]]; then
    source /opt/rh/devtoolset-2/enable
fi

if [ -f /usr/bin/yum ]; then
    RHVER="$(rpm --eval %rhel)"
fi

OPENSSL_HEADER="/usr/include/openssl/opensslv.h"
TOKUDB_PLUGIN=$(find $WORKDIR_ABS -type f -name 'ha_tokudb.so')
HOTBACKUP_LIB=$(find $WORKDIR_ABS -type f -name 'libHotBackup.so')
HOTBACKUP_PLUGIN=$(find $WORKDIR_ABS -type f -name 'tokudb_backup.so')
JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)
OPENSSL_VER=$(grep -o 'define SHLIB_VERSION_NUMBER .*$' ${OPENSSL_HEADER} | awk -F'"' '{print $(NF-1)}' | sed -e 's:[a-z]::g')
#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
#
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
if [[ "${CMAKE_BUILD_TYPE}" = "Debug" ]]; then
    MTR_ARGS+=" --debug-server"
fi
#
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
  MTR_ARGS+=" --valgrind --valgrind-clients --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
  [[ ${OPENSSL_VER} < '1.0.2' ]] && export OPENSSL_ia32cap=~0x200000000000000
  TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi
#
if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
    export ASAN_OPTIONS=allocator_may_return_null=true
# trying to find the proper library
    MYSQLD=$(find ${WORKDIR_ABS}/PS -name mysqld)
    LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
    ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi
#
if [[ -n "${MTR_REPEAT}" ]]; then
    MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi
#
# force to use mecab everywhere (except RHEL)
if [[ ! -e /etc/redhat-release ]]; then
    MTR_ARGS+=" --mysqld=--loose-mecab-rc-file=/etc/mecabrc"
fi
#
status=0
#
# Running MTR test cases
if [[ "${DEFAULT_TESTING}" != "no" ]]; then

    if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
    else
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    fi

  MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=$(grep -c ^processor /proc/cpuinfo) \
        --result-file \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${WORKDIR_ABS}/junit.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.main" || true
fi


if [[ "$HOTBACKUP_TESTING" != "no" ]] && [[ -n "${TOKUDB_PLUGIN}" ]] && [[ -n "${HOTBACKUP_LIB}" ]] && [[ -n "${HOTBACKUP_PLUGIN}" ]]; then
  MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${HOTBACKUP_LIB}:${JEMALLOC}:${EATMYDATA}"

  MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        --parallel=$(grep -c ^processor /proc/cpuinfo) \
        ${MTR_ARGS} \
        --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --suite tokudb.backup \
        --junit-output=${WORKDIR_ABS}/junit_tokudb_hotbackup.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.tokudb_hotbackup" || true
fi

# if there's tokudb plugin compiled run tokudb tests else exit with previous status
if [[ "${TOKUDB_ENGINES_MTR}" = "yes" ]] && [[ -n "${TOKUDB_PLUGIN}" ]]; then
  # this is a workaround because mtr is looking for ha_tokudb.so in source_dir in lib/plugins/mysql when it's actually in builddir/storage/tokudb
  mkdir -p lib/mysql/plugin
  ln -s ${TOKUDB_PLUGIN} lib/mysql/plugin/ha_tokudb.so
  ln -s ${HOTBACKUP_PLUGIN} lib/mysql/plugin/tokudb_backup.so

    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    MTR_BUILD_THREAD=auto \
        ./mtr --suite=engines/iuds,engines/funcs \
            --mysqld=--default-storage-engine=tokudb --mysqld=--default-tmp-storage-engine=tokudb \
            --suite-timeout=9999 --testcase-timeout=${TESTCASE_TIMEOUT} --parallel=$(grep -c ^processor /proc/cpuinfo) --big-test --max-test-fail=0 \
            --mysqld=--plugin-load=tokudb=ha_tokudb.so --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
            --mysqld=--loose-tokudb_auto_analyze=0 --mysqld=--loose-tokudb_analyze_in_background=false \
            ${TOKUDB_ENGINES_MTR_ARGS} \
            --junit-output=${WORKDIR_ABS}/junit_tokudb.xml \
            --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.tokudb" || true
fi

# if all tests are disabled, run only one small test to prevent test stage issue and perform simle test of binary file
if [[ "${TOKUDB_ENGINES_MTR}" = 'no' ]] && [[ "${HOTBACKUP_TESTING}" = 'no' ]] && [[ "${DEFAULT_TESTING}" = 'no' ]] ; then
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        main.1st \
        --junit-output=${WORKDIR_ABS}/small.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.small" || true
fi

if [[ "${CI_FS_MTR}" = 'yes' ]]; then
    CI_TESTS=""
    for CI_TESTS_TMP in $(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_case_insensitive_file_system.inc | awk -F '/' '{print $NF}' | sed 's/.test//g'); do
        CI_TESTS+=" $CI_TESTS_TMP"
    done

    MTR_BUILD_THREAD=auto ./mtr \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --tmpdir="/tmp/ps_mtr_tempdir" \
        --vardir="/tmp/ci_disk_dir" \
        ${CI_TESTS} \
        --junit-output=${WORKDIR_ABS}/junit_ci_fs.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.ci_fs" || true
fi

if [[ ${RHVER} != 6 ]] && [[ "${KEYRING_VAULT_MTR}" == 'yes' ]]; then
    if [ -f /usr/bin/yum ]; then
        if [[ ${RHVER} -eq 7 ]]; then
            source /opt/rh/httpd24/enable
        fi
        if [[ ! -d /run/supervisor ]]; then
            sudo mkdir /run/supervisor
        fi
        supervisorconfigpath=/etc/supervisord.d/vault.ini
    else
        supervisorconfigpath=/etc/supervisor/conf.d/vault.conf
    fi
    sudo sed -i "s@devtoken1@${VAULT_V1_DEV_TOKEN}@g; s@devtoken2@${VAULT_V2_DEV_TOKEN}@g" $supervisorconfigpath

    # Prepare CAs and certs for both vaults
    echo subjectAltName = IP:127.0.0.1 > /tmp/extfile.cnf
    for VER in v1 v2; do
        sudo openssl genrsa -out /etc/vault.d-$VER-prod/ca.key 2048
        sudo openssl req -new -x509 -nodes -days 31 -subj "/CN=VAULT CA" -key /etc/vault.d-$VER-prod/ca.key -out /etc/vault.d-$VER-prod/ca.pem
        sudo openssl req -newkey rsa:2048 -subj "/CN=VAULT CERT" -nodes -keyout /etc/vault.d-$VER-prod/privkey.pem -out /etc/vault.d-$VER-prod/server-req.pem
        sudo openssl x509 -req -in /etc/vault.d-$VER-prod/server-req.pem -days 31 -CA /etc/vault.d-$VER-prod/ca.pem -CAkey /etc/vault.d-$VER-prod/ca.key -set_serial 01 -out /etc/vault.d-$VER-prod/fullchain.pem -extfile /tmp/extfile.cnf
        cat /etc/vault.d-$VER-prod/ca.pem | sudo tee -a /etc/vault.d-$VER-prod/fullchain.pem
        sudo chown -R vault-$VER-prod:vault-$VER-prod /etc/vault.d-$VER-prod
        sudo install --owner=mysql /etc/vault.d-$VER-prod/ca.pem ${WORKDIR_ABS}/PS/mysql-test/vault-$VER-ca.pem
    done

    sudo supervisord

    # Required to initialize everything
    sleep 5

    if [[ ! -z $(sudo supervisorctl status | grep FAILED) ]]; then
        echo Some process have failed:
        sudo supervisorctl status
        exit 1
    fi

    VAULT_V1_PROD_KEYS="$(/usr/local/bin/vault.v1 operator init -address='https://127.0.0.1:9300' -ca-cert=${WORKDIR_ABS}/PS/mysql-test/vault-v1-ca.pem)"
    VAULT_V2_PROD_KEYS="$(/usr/local/bin/vault.v2 operator init -address='https://127.0.0.1:9500' -ca-cert=${WORKDIR_ABS}/PS/mysql-test/vault-v2-ca.pem)"

    VAULT_V1_PROD_UNSEAL_KEYS=$(echo "$VAULT_V1_PROD_KEYS" | grep 'Unseal Key' | awk -F ':' '{print $2}')
    VAULT_V2_PROD_UNSEAL_KEYS=$(echo "$VAULT_V2_PROD_KEYS" | grep 'Unseal Key' | awk -F ':' '{print $2}')
    VAULT_V1_PROD_TOKEN=$(echo "$VAULT_V1_PROD_KEYS" | grep 'Initial Root Token' | awk -F ':' '{print $2}' | xargs)
    VAULT_V2_PROD_TOKEN=$(echo "$VAULT_V2_PROD_KEYS" | grep 'Initial Root Token' | awk -F ':' '{print $2}' | xargs)

    for key in $VAULT_V1_PROD_UNSEAL_KEYS; do
        /usr/local/bin/vault.v1 operator unseal -address='https://127.0.0.1:9300' -ca-cert=${WORKDIR_ABS}/PS/mysql-test/vault-v1-ca.pem $key
        sleep 1
    done
    
    for key in $VAULT_V2_PROD_UNSEAL_KEYS; do
        /usr/local/bin/vault.v2 operator unseal -address='https://127.0.0.1:9500' -ca-cert=${WORKDIR_ABS}/PS/mysql-test/vault-v2-ca.pem $key
        sleep 1
    done

    echo "Running tests with Hashicorp Vault in Dev mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_DEV_ADDRESS} \
    MTR_VAULT_TOKEN=${VAULT_V1_DEV_TOKEN} \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v1" || true

    MTR_VAULT_ADDRESS=${VAULT_V2_DEV_ADDRESS} \
    MTR_VAULT_TOKEN=${VAULT_V2_DEV_TOKEN} \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v2" || true

    echo "Running tests with Hashicorp Vault in Production mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_PROD_ADDRESS} \
    MTR_VAULT_TOKEN=${VAULT_V1_PROD_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/PS/mysql-test/vault-v1-ca.pem" \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v1" || true

    MTR_VAULT_ADDRESS=${VAULT_V2_PROD_ADDRESS} \
    MTR_VAULT_TOKEN=${VAULT_V2_PROD_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/PS/mysql-test/vault-v2-ca.pem" \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --suite=keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v2" || true
fi

exit $status
