#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      DEFAULT_TESTING = (yes no)
#      HOTBACKUP_TESTING = (yes no)
#      TOKUDB_ENGINES_MTR = (yes no)
#      MTR_ARGS
#      MTR_REPEAT
#      DOCKER_OS

set -o errexit
set -o xtrace

WORKDIR_ABS=$(cd ${1:-./build}; pwd -P)
rm -fr ${WORKDIR_ABS}/PS
mkdir -p ${WORKDIR_ABS}/PS
tar -C ${WORKDIR_ABS}/PS --strip-components=1 -zxpf $(ls $WORKDIR_ABS/*.tar.gz | head -1)
cd ${WORKDIR_ABS}/PS/mysql-test
TESTCASE_TIMEOUT=30

# CentOS 6 & 7
if [[ -f /opt/rh/devtoolset-7/enable ]]; then
    source /opt/rh/devtoolset-7/enable
fi

# Centos 6/i386
if [[ $(rpm --eval %_arch) = "i386" ]] && [[ -f /opt/rh/devtoolset-2/enable ]]; then
    source /opt/rh/devtoolset-2/enable
fi
#
OPENSSL_HEADER="/usr/include/openssl/opensslv.h"
TOKUDB_PLUGIN=$(find $WORKDIR_ABS/PS -type f -name 'ha_tokudb.so')
HOTBACKUP_LIB=$(find $WORKDIR_ABS/PS -type f -name 'libHotBackup.so')
HOTBACKUP_PLUGIN=$(find $WORKDIR_ABS/PS -type f -name 'tokudb_backup.so')
JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)
OPENSSL_VER=$(grep -o 'define SHLIB_VERSION_NUMBER .*$' ${OPENSSL_HEADER} | awk -F'"' '{print $(NF-1)}' | sed -e 's:[a-z]::g')
#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
# we test with system jemalloc
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
if [[ "${CMAKE_BUILD_TYPE}" = "Debug" ]]; then
    MTR_ARGS+=" --debug-server"
fi
#
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
    MTR_ARGS+=" --valgrind --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
    [[ ${OPENSSL_VER} < '1.0.2' ]] && export OPENSSL_ia32cap=~0x200000000000000
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 15))
fi
#
if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
    export ASAN_OPTIONS=allocator_may_return_null=true
    # trying to find the proper library
    MYSQLD=$(find ${WORKDIR_ABS}/PS -name mysqld)
    LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
    ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi
#
if [[ -n "${MTR_REPEAT}" ]]; then
    MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_ARGS}" == *"--big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 15))
fi

if [[ "${IS_FB}" == 'yes' ]]; then
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$WORKDIR_ABS/PS/zstd/lib"
    ADD_TO_LD_PRELOAD+="$WORKDIR_ABS/PS/zstd/lib/libzstd.so.1.3.4:"
fi

status=0

# Running MTR test cases
if [[ "${DEFAULT_TESTING}" != "no" ]]; then

    if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
    else
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    fi

  MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=$(grep -c ^processor /proc/cpuinfo) \
        --result-file \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${WORKDIR_ABS}/junit.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.main" \
        || true
fi
#
if [[ "$HOTBACKUP_TESTING" != "no" ]] && [[ -n "${TOKUDB_PLUGIN}" ]] && [[ -n "${HOTBACKUP_LIB}" ]] && [[ -n "${HOTBACKUP_PLUGIN}" ]]; then
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${HOTBACKUP_LIB}:${JEMALLOC}:${EATMYDATA}"

    MTR_BUILD_THREAD=auto ./mtr \
      --force \
      --max-test-fail=0 \
      --suite-timeout=9999 \
      --testcase-timeout=${TESTCASE_TIMEOUT} \
      --parallel=$(grep -c ^processor /proc/cpuinfo) \
      ${MTR_ARGS} \
      --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
      --suite tokudb.backup \
      --junit-output=${WORKDIR_ABS}/junit_tokudb_hotbackup.xml \
      --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.tokudb_hotbackup" \
      || true
fi

# if there's tokudb plugin compiled run tokudb tests else exit with previous status
if [[ "${TOKUDB_ENGINES_MTR}" = "yes" ]] && [[ -n "${TOKUDB_PLUGIN}" ]]; then
  # this is a workaround because mtr is looking for ha_tokudb.so in source_dir in lib/plugins/mysql when it's actually in builddir/storage/tokudb
  mkdir -p lib/mysql/plugin
  ln -s ${TOKUDB_PLUGIN} lib/mysql/plugin/ha_tokudb.so
  ln -s ${HOTBACKUP_PLUGIN} lib/mysql/plugin/tokudb_backup.so

    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    MTR_BUILD_THREAD=auto \
        ./mtr --suite=engines/iuds,engines/funcs \
            --mysqld=--default-storage-engine=tokudb --mysqld=--default-tmp-storage-engine=tokudb \
            --suite-timeout=9999 --testcase-timeout=450 --parallel=$(grep -c ^processor /proc/cpuinfo) --big-test --max-test-fail=0 \
            --mysqld=--plugin-load=tokudb=ha_tokudb.so --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
            --mysqld=--loose-tokudb_auto_analyze=0 --mysqld=--loose-tokudb_analyze_in_background=false \
            ${TOKUDB_ENGINES_MTR_ARGS} \
            --junit-output=${WORKDIR_ABS}/junit_tokudb.xml \
            --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.tokudb" || true
fi

# if all tests are disabled, run only one small test to prevent test stage issue and perform simle test of binary file
if [[ "${TOKUDB_ENGINES_MTR}" = 'no' ]] && [[ "${HOTBACKUP_TESTING}" = 'no' ]] && [[ "${DEFAULT_TESTING}" = 'no' ]] ; then
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        main.1st \
        --junit-output=${WORKDIR_ABS}/small.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.small" || true
fi

exit $status
