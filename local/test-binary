#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      DEFAULT_TESTING = (yes no)
#      HOTBACKUP_TESTING = (yes no)
#      TOKUDB_ENGINES_MTR = (yes no)
#      MTR_ARGS
#      MTR_REPEAT

set -o errexit
set -o xtrace

WORKDIR_ABS=$(cd ${1:-./build}; pwd -P)
rm -fr ${WORKDIR_ABS}/PS
mkdir -p ${WORKDIR_ABS}/PS/sql
tar -C ${WORKDIR_ABS}/PS --strip-components=1 -zxpf $(ls $WORKDIR_ABS/*.tar.gz | head -1)

ln -sf ${WORKDIR_ABS}/PS/runtime_output_directory ${WORKDIR_ABS}/runtime_output_directory
ln -sf ${WORKDIR_ABS}/PS/plugin_output_directory ${WORKDIR_ABS}/plugin_output_directory
ln -sf ${WORKDIR_ABS}/PS/library_output_directory ${WORKDIR_ABS}/library_output_directory

cd ${WORKDIR_ABS}/PS/mysql-test
TESTCASE_TIMEOUT=30
PARALLEL=$(grep -c ^processor /proc/cpuinfo)
# CentOS 6 & 7
if [[ -f /opt/rh/devtoolset-8/enable ]]; then
    source /opt/rh/devtoolset-8/enable
fi

# Centos 6/i386
if [[ $(rpm --eval %_arch) = "i386" ]] && [[ -f /opt/rh/devtoolset-2/enable ]]; then
    source /opt/rh/devtoolset-2/enable
fi

OPENSSL_HEADER="/usr/include/openssl/opensslv.h"
TOKUDB_PLUGIN=$(find $WORKDIR_ABS/PS/plugin_output_directory -type f -name 'ha_tokudb.so')
HOTBACKUP_LIB=$(find $WORKDIR_ABS/PS -type f -name 'libHotBackup.so')
HOTBACKUP_PLUGIN=$(find $WORKDIR_ABS/PS/plugin_output_directory -type f -name 'tokudb_backup.so')
JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)
OPENSSL_VER=$(grep -o 'define SHLIB_VERSION_NUMBER .*$' ${OPENSSL_HEADER} | awk -F'"' '{print $(NF-1)}' | sed -e 's:[a-z]::g')

#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
#
# we test with system jemalloc
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
MTR_ARGS+=" --timestamp --report-unstable-tests"
#
##
function process_mtr_output {
# parameters are:
  local TESTSUITE=${1}
  local INFILE=${2}
  local OUTFILE=${3}
  egrep -a -o '[[:alpha:]]+(_[[:alnum:]]+)?(\.\/)?.*\[ .* \].*$' ${INFILE} | sort | \
  gawk 'BEGIN { print "<testsuite name=\"@@TESTSUITE@@\" tests=\"@@PASSED@@\" failures=\"@@FAILURES@@\" disabled=\"@@DISABLED@@\" skipped=\"@@SKIPPED@@\">" }
  /\[.*pass \]/ { printf "\t<testcase name=\"%s\" time=\"%.3f\"></testcase>\n", $1, $NF/1000.0 }
  /\[ disabled \]/ { printf "\t<testcase name=\"%s\"><skipped/></testcase>\n", $1 }
  /\[ skipped \]/  { printf "\t<testcase name=\"%s\"><skipped/></testcase>\n", $1 }
  /\[.*fail \]/    { printf "\t<testcase name=\"%s\"><failure/></testcase>\n", $1 }
  END { print "</testsuite>" }' > ${OUTFILE}.tmp
  gawk '!seen[$0]++' < ${OUTFILE}.tmp > ${OUTFILE}
  rm -f ${OUTFILE}.tmp
#
  PASSED=$(grep -c 'time=' ${OUTFILE} ||:)
  FAILURES=$(grep -c '<failure/>' ${OUTFILE} ||:)
  DISABLED=$(grep -c '\[ disabled \]' ${INFILE} ||:)
  SKIPPED=$(grep -c '\[ skipped \]' ${INFILE} ||:)
#
  sed -i.bak -e "s:@@TESTSUITE@@:${TESTSUITE}:g" ${OUTFILE}
  sed -i.bak -e "s:@@PASSED@@:${PASSED}:g" ${OUTFILE}
  sed -i.bak -e "s:@@FAILURES@@:${FAILURES}:g" ${OUTFILE}
  sed -i.bak -e "s:@@DISABLED@@:${DISABLED}:g" ${OUTFILE}
  sed -i.bak -e "s:@@SKIPPED@@:${SKIPPED}:g" ${OUTFILE}
  sed -i.bak -e "s: \[::g" ${OUTFILE}
}

if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
  MTR_ARGS+=" --valgrind --valgrind-clients --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
  [[ ${OPENSSL_VER} < '1.0.2' ]] && export OPENSSL_ia32cap=~0x200000000000000
  TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
  if [[ ${PARALLEL} -gt 1 ]]; then
    PARALLEL=$((PARALLEL/3))
  fi
fi

if [[ "${ANALYZER_OPTS}" == *WITH_*SAN*=ON* ]]; then
    MTR_ARGS+=" --sanitize"
fi

if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
  export ASAN_OPTIONS=allocator_may_return_null=true
  # trying to find the proper library
  MYSQLD=$(find ${WORKDIR_ABS}/PS/bin -name mysqld)
  LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
  ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi

if [[ -n "${MTR_REPEAT}" ]]; then
  MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_ARGS}" == *"--suite=max_parts"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 3))
fi

#
# force to use mecab everywhere (except RHEL)
if [[ ! -e /etc/redhat-release ]]; then
    MTR_ARGS+=" --mysqld=--loose-mecab-rc-file=/etc/mecabrc"
fi
#

if [[ $MTR_ARGS == *"--big-test"* ]] || [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi

status=0
#
# Running MTR test cases
if [[ "${DEFAULT_TESTING}" != "no" ]]; then

    if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
    else
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    fi

  MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        ${MTR_ARGS} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        | tee ${WORKDIR_ABS}/mtr.output || status=$?
    process_mtr_output MySQL "${WORKDIR_ABS}/mtr.output" "${WORKDIR_ABS}/junit.xml"
fi
#
if [[ "$HOTBACKUP_TESTING" != "no" ]] && [[ -n "${TOKUDB_PLUGIN}" ]] && [[ -n "${HOTBACKUP_LIB}" ]] && [[ -n "${HOTBACKUP_PLUGIN}" ]]; then
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${HOTBACKUP_LIB}:${JEMALLOC}:${EATMYDATA}"

    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        --parallel=${PARALLEL} \
        ${MTR_ARGS} \
        --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --suite tokudb_backup \
        | tee ${WORKDIR_ABS}/tokudb_hotbackup.output || true
    process_mtr_output "Percona Server - TokuDB HotBackup" "${WORKDIR_ABS}/tokudb_hotbackup.output" "${WORKDIR_ABS}/junit_tokudb_hotbackup.xml"
fi
#
# if there's tokudb plugin compiled run tokudb tests else exit with previous status
if [[ "${TOKUDB_ENGINES_MTR}" = "yes" ]] && [[ -n "${TOKUDB_PLUGIN}" ]]; then
  # this is a workaround because mtr is looking for ha_tokudb.so in source_dir in lib/plugins/mysql when it's actually in builddir/storage/tokudb
  mkdir -p lib/mysql/plugin
  ln -s ${TOKUDB_PLUGIN} lib/mysql/plugin/ha_tokudb.so
  ln -s ${HOTBACKUP_PLUGIN} lib/mysql/plugin/tokudb_backup.so

    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    MTR_BUILD_THREAD=auto \
        ./mtr --suite=engines/iuds,engines/funcs \
            --mysqld=--default-storage-engine=tokudb --mysqld=--default-tmp-storage-engine=tokudb \
            --suite-timeout=9999 --testcase-timeout=${TESTCASE_TIMEOUT} --parallel=${PARALLEL} --big-test --max-test-fail=0 \
            --mysqld=--plugin-load=tokudb=ha_tokudb.so --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
            --mysqld=--loose-tokudb_auto_analyze=0 --mysqld=--loose-tokudb_analyze_in_background=false \
            ${TOKUDB_ENGINES_MTR_ARGS} \
            2>&1 | tee ${WORKDIR_ABS}/tokudb.output || true
    process_mtr_output "Percona Server - TokuDB" "${WORKDIR_ABS}/tokudb.output" "${WORKDIR_ABS}/junit_tokudb.xml"
fi

# if all tests are disabled, run only one small test to prevent test stage issue and perform simle test of binary file
if [[ "${TOKUDB_ENGINES_MTR}" = 'no' ]] && [[ "${HOTBACKUP_TESTING}" = 'no' ]] && [[ "${DEFAULT_TESTING}" = 'no' ]] ; then
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        main.1st \
        | tee ${WORKDIR_ABS}/small.output || true
    process_mtr_output "Percona Server - Test" "${WORKDIR_ABS}/small.output" "${WORKDIR_ABS}/small.xml"
fi

if [[ "${CI_FS_MTR}" = 'yes' ]]; then
    CI_TESTS=""
    for CI_TESTS_TMP in $(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_case_insensitive_file_system.inc | awk -F '/' '{print $NF}' | sed 's/.test//g'); do
        CI_TESTS+=" $CI_TESTS_TMP"
    done

    MTR_BUILD_THREAD=auto ./mtr \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --tmpdir="/tmp/ps_mtr_tempdir" \
        --vardir="/tmp/ci_disk_dir" \
        ${CI_TESTS} \
        | tee ${WORKDIR_ABS}/ci_fs.output || true
    process_mtr_output "Percona Server - Test" "${WORKDIR_ABS}/ci_fs.output" "${WORKDIR_ABS}/ci_fs.xml"
fi

exit $status
