#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      DEFAULT_TESTING = (yes no)
#      MTR_ARGS
#      MTR_REPEAT
#      DOCKER_OS

set -o errexit
set -o xtrace

WORKDIR_ABS=$(cd ${1:-./build}; pwd -P)
rm -fr ${WORKDIR_ABS}/PS
mkdir -p ${WORKDIR_ABS}/PS/sql
tar -C ${WORKDIR_ABS}/PS --strip-components=1 -zxpf $(ls $WORKDIR_ABS/*.tar.gz | head -1)

mkdir -p ${WORKDIR_ABS}/unittest && ln -sf ${WORKDIR_ABS}/PS ${WORKDIR_ABS}/unittest/gunit
ln -sf ${WORKDIR_ABS}/PS/runtime_output_directory ${WORKDIR_ABS}/runtime_output_directory
ln -sf ${WORKDIR_ABS}/PS/plugin_output_directory ${WORKDIR_ABS}/plugin_output_directory
ln -sf ${WORKDIR_ABS}/PS/library_output_directory ${WORKDIR_ABS}/library_output_directory

# GCOV Cross-profiling and MTR args
if [[ ${WITH_GCOV} == 'ON' ]]; then
    export GCOV_PREFIX="${WORKDIR_ABS}/PS"
    export GCOV_PREFIX_STRIP="2"
    MTR_ARGS+=" --gcov"
fi

cd ${WORKDIR_ABS}/PS/mysql-test
TESTCASE_TIMEOUT=30
PARALLEL=$(grep -c ^processor /proc/cpuinfo)
# CentOS 7
if [[ -f /opt/rh/devtoolset-8/enable ]]; then
    source /opt/rh/devtoolset-8/enable
fi

JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)

#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
#
# we test with system jemalloc
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
MTR_ARGS+=" --timestamp --report-unstable-tests"
ANALYZER_MTR_ARGS=""
#
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
  ANALYZER_MTR_ARGS+=" --valgrind --valgrind-clients --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
  TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
  if [[ ${PARALLEL} -gt 1 ]]; then
    PARALLEL=$((PARALLEL/3))
  fi
fi

if [[ "${ANALYZER_OPTS}" == *WITH_*SAN*=ON* ]]; then
    ANALYZER_MTR_ARGS+=" --sanitize"
fi

MTR_ARGS+=${ANALYZER_MTR_ARGS}

if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
  export ASAN_OPTIONS=allocator_may_return_null=true
  # trying to find the proper library
  MYSQLD=$(find ${WORKDIR_ABS}/PS/bin -name mysqld)
  LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
  ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi

if [[ -n "${MTR_REPEAT}" ]]; then
  MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_ARGS}" == *"--suite=max_parts"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 3))
fi

#
# force to use mecab everywhere (except RHEL)
if [[ ! -e /etc/redhat-release ]]; then
    MTR_ARGS+=" --mysqld=--loose-mecab-rc-file=/etc/mecabrc"
fi
#

if [[ $MTR_ARGS == *"--big-test"* ]] || [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi

status=0
#
# Running MTR test cases
if [[ "${DEFAULT_TESTING}" != "no" ]]; then

    if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
    else
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    fi

  MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${WORKDIR_ABS}/junit.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.main" || true
fi
#
# if all tests are disabled, run only one small test to prevent test stage issue and perform simple test of binary file
if [[ "${CI_FS_MTR}" = 'no' ]] && [[ "${KEYRING_VAULT_MTR}" = 'no' ]] && [[ "${DEFAULT_TESTING}" = 'no' ]] ; then
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        main.1st \
        --junit-output=${WORKDIR_ABS}/small.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.small" || true
fi

if [[ "${CI_FS_MTR}" = 'yes' ]]; then
    CI_TESTS=""
    for CI_TESTS_TMP in $(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_case_insensitive_file_system.inc | awk -F '/' '{print $NF}' | sed 's/.test//g'); do
        CI_TESTS+=" $CI_TESTS_TMP"
    done
    # Requested in PS-7602
    if [[ ${CMAKE_BUILD_TYPE} = 'Debug' ]]; then
        CI_TESTS+=" information_schema.i_s_schema_definition_debug"
    fi

    MTR_BUILD_THREAD=auto ./mtr \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --tmpdir="/tmp/ps_mtr_tempdir" \
        --vardir="/tmp/ci_disk_dir" \
        ${CI_TESTS} \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_ci_fs.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.ci_fs" || true
fi

if [[ ${ZEN_FS_MTR} = 'yes' ]] && [[ ${WITH_ROCKSDB} = 'ON' ]]; then
    if [[ ${DOCKER_OS} = 'ubuntu-jammy' ]] || [[ ${DOCKER_OS} = 'debian-bullseye' ]] || [[ ${DOCKER_OS} = 'oraclelinux-9' ]]; then
        sudo install --owner=root --group=root --mode=+rx ${WORKDIR_ABS}/PS/runtime_output_directory/zenfs /usr/bin/

        sudo rm -rf /tmp/zenfs* || true
        for nulldevice in {0..5}; do
            sudo rm -rf /tmp/zenfs_aux/nullb$nulldevice || true
        done

        mkdir -p /tmp/zenfs_aux

        for nulldevice in {0..5}; do
            zenfs mkfs --zbd=nullb$nulldevice --aux_path=/tmp/zenfs_aux/nullb$nulldevice

            zenfs df --zbd nullb$nulldevice
            zenfs list --zbd nullb$nulldevice

            blkzone report /dev/nullb$nulldevice
        done
        zenfs ls-uuid

        if [[ ${CMAKE_BUILD_TYPE} = "Debug" ]]; then
            ROCKSDB_ZENFS_MTR_ARGS="--debug-server"
        fi

        SOURCE_FS_URI1=zenfs://dev:nullb0 SOURCE_FS_URI2=zenfs://dev:nullb1 SOURCE_FS_URI3=zenfs://dev:nullb2 \
        REPLICA_FS_URI1=zenfs://dev:nullb3 REPLICA_FS_URI2=zenfs://dev:nullb4 REPLICA_FS_URI3=zenfs://dev:nullb5 \
        MTR_BUILD_THREAD=auto ./mtr \
            --force \
            --max-test-fail=0 \
            --suite-timeout=9999 \
            --testcase-timeout=${TESTCASE_TIMEOUT} \
            --big-test \
            --defaults-extra-file=include/zenfs_nullb_emulated_parallel_rpl.cnf \
            --fs-cleanup-hook="@lib/zenfs_cleanup_rpl.sh" \
            --parallel=3 \
            --suite=rocksdb \
            ${ROCKSDB_ZENFS_MTR_ARGS} \
            ${ANALYZER_MTR_ARGS} \
            --junit-output=${WORKDIR_ABS}/junit_rocksdb_zenfs.xml \
            --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.rocksdb_zenfs" || true
    fi
fi

if [[ ${KEYRING_VAULT_MTR} == 'yes' ]]; then
    if [ -f /usr/bin/yum ]; then
        if [[ -f /opt/rh/httpd24/enable ]]; then
            source /opt/rh/httpd24/enable
        fi
    fi

    echo "Running tests with Hashicorp Vault in Dev mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v1" || true

    MTR_VAULT_ADDRESS=${VAULT_V2_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v2" || true

    echo "Running tests with Hashicorp Vault in Production mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/vault-prod-v1-ca.pem" \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v1" || true

    MTR_VAULT_ADDRESS=${VAULT_V2_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/vault-prod-v2-ca.pem" \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$(nproc) \
        --retry=0 \
        --big-test \
        --unit-tests \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v2" || true
fi

# GCOV Covergae Report
if [[ ${WITH_GCOV} == 'ON' ]]; then
    pushd ${WORKDIR_ABS}/PS
    wget https://raw.githubusercontent.com/Percona-QA/percona-qa/master/Coverage/dgcov.pl
    perl dgcov.pl --v --dump | tee coverage.txt
    popd
fi

exit $status
