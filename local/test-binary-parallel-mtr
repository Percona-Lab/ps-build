#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      MTR_ARGS
#      MTR_REPEAT = (1 ...)
#      MTR_SUITES = e.g "sys_vars,federated"
#      WORKER_NO = (1 ... 8)
#      DOCKER_OS = (ubuntu-jammy debian-bullseye oraclelinux-9 ...)
#      CI_FS_MTR = (yes no)
#      WITH_PS_PROTOCOL = (yes no)
#      KEYRING_VAULT_MTR = (yes no)
#      WITH_ROCKSDB = (ON OFF)
#      KEEP_BUILD = (yes no)

set -o errexit
set -o xtrace

WORKDIR=$(cd ${1:-./build}; pwd -P)
BUILD_DIR=${WORKDIR}/build
RESULTS_DIR=${WORKDIR}/results
EXTRACT_DIR=${WORKDIR}/extract
mkdir -p ${RESULTS_DIR}

echo "*******************************************************"
echo "Starting tests on worker ${WORKER_NO}"
whoami
grep -c ^processor /proc/cpuinfo
free
prlimit
ulimit -a
echo "*******************************************************"

TESTCASE_TIMEOUT=30
PARALLEL=$(grep -c ^processor /proc/cpuinfo)
# CentOS 7
if [[ -f /opt/rh/devtoolset-8/enable ]]; then
    source /opt/rh/devtoolset-8/enable
fi

# TODO: This should be already there in the Docker container
if [ -f /etc/redhat-release ]; then
    RHEL=$(rpm --eval %rhel)
    if [ "$RHEL" == 8 ]; then
        pushd /etc/yum.repos.d/
        sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
        sudo sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        popd
    fi
    sudo yum install -y rsync cpanminus
    sudo cpanm --notest Expect
else
    sudo apt -y update
    sudo apt -y install rsync cpanminus
    sudo cpanm --notest Expect
fi

JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)

#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
#
# we test with system jemalloc
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
MTR_ARGS+=" --timestamp --report-unstable-tests"
ANALYZER_MTR_ARGS=""
#
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
  ANALYZER_MTR_ARGS+=" --valgrind --valgrind-clients --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
  TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
  if [[ ${PARALLEL} -gt 1 ]]; then
    PARALLEL=$((PARALLEL/3))
  fi
fi

# hack for too big instances ;)
if [[ ${PARALLEL} -gt 10 ]]; then
  echo "Limit parallel ${PARALLEL} -> 10"
  PARALLEL=10
fi

if [[ "${ANALYZER_OPTS}" == *WITH_*SAN*=ON* ]]; then
    ANALYZER_MTR_ARGS+=" --sanitize"
fi

MTR_ARGS+=${ANALYZER_MTR_ARGS}

if [[ -n "${MTR_REPEAT}" ]]; then
  MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_ARGS}" == *"--suite=max_parts"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 3))
fi

#
# force to use mecab everywhere (except RHEL)
if [[ ! -e /etc/redhat-release ]]; then
    MTR_ARGS+=" --mysqld=--loose-mecab-rc-file=/etc/mecabrc"
fi
#

if [[ $MTR_ARGS == *"--big-test"* ]] || [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi

#
# execute big tests in separate run
BIG_TEST=0
ONLY_BIG_TEST=0
if [[ $MTR_ARGS == *"--big-test"* ]]; then
    BIG_TEST=1
fi
if [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    ONLY_BIG_TEST=1
    BIG_TEST=1
fi
MTR_ARGS=${MTR_ARGS//"--big-test"/""}
MTR_ARGS=${MTR_ARGS//"--only-big-test"/""}

#
# unit tests
UNIT_TESTS=0
if [[ $MTR_ARGS == *"--unit-tests-report"* ]]; then
    if [ -e ${BUILD_DIR}/mysql-test/mysql-test-run.pl ]; then
        UNIT_TESTS=1
    else
        echo "Skipping unit tests. Couldn't find ${BUILD_DIR}/mysql-test/mysql-test-run.pl"
    fi
fi
MTR_ARGS=${MTR_ARGS//"--unit-tests-report"/""}

rm -fr ${EXTRACT_DIR}
mkdir -p ${EXTRACT_DIR}/sql ${EXTRACT_DIR}/mysql-test
cd ${EXTRACT_DIR}/mysql-test

#
# >>>> execute all unit tests at the beginning with main.1st only using an original build (not files for ".tar.gz" archive)
if [[ $UNIT_TESTS == "1" ]]; then
    tests="main.1st"
    suiteNoSlash="UNIT_TESTS"
    echo "Executing unit tests with $tests"

    df -h
    du /dev/shm
    mount
    ls -la /dev/shm
    cat /proc/meminfo
    start=`date +%s`

    if [[ "${KEYRING_VAULT_MTR}" == 'yes' ]]; then
        MTR_VAULT_ARRAY=(
            MTR_VAULT_ADDRESS=${VAULT_V2_DEV_ADDRESS}
            MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_DEV_ROOT_TOKEN}
            MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_DEV_MTR_TOKEN}
            MTR_VAULT_VERSION=2
        )
    fi

    pushd ${BUILD_DIR}/mysql-test
    env -i "${MTR_VAULT_ARRAY[@]}" MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        --unit-tests-report \
        ${tests} \
        ${MTR_ARGS} \
        --force \
        --max-test-fail=0 \
        --junit-output=${RESULTS_DIR}/junit_${suiteNoSlash}.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true
    popd

    ln -s ${BUILD_DIR}/mysql-test/var $PWD/var_${suiteNoSlash}
    which rsync
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_${suiteNoSlash}

    df -h
    du -sh /dev/shm

    end=`date +%s`
    runtime=$((end-start))
    echo KH,UNIT_TESTS,${tests},time,$runtime
fi


if [[ "${KEEP_BUILD}" != "yes" ]]; then
    echo "*******************************************************"
    echo "Remove the original build"
    ls -l ${BUILD_DIR} || :
    sudo rm -rf ${BUILD_DIR}
fi

echo "*******************************************************"
echo "Decompress \".tar.gz\" archive and use it for MTR tests"
tar -C ${EXTRACT_DIR} --strip-components=1 -zxpf $(ls ${WORKDIR}/*.tar.gz | head -1)


if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
  export ASAN_OPTIONS=allocator_may_return_null=true
  # trying to find the proper library
  MYSQLD=$(find ${EXTRACT_DIR}/bin -name mysqld)
  LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
  ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi

#
# set options for "--mysqld-env"
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
else
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
fi


#
# Running MTR test cases
MTR_ARGS="${MTR_ARGS} --no-unit-tests"

ARRAY_MTR_SUITES=($(echo $MTR_SUITES | sed 's/,/ /g'))
# >>>> main MTR execution loop starts here
for suite in "${ARRAY_MTR_SUITES[@]}"; do
    only_big_tests_this=$ONLY_BIG_TEST
    big_tests_this=$BIG_TEST

    # suite may be in form:
    # main
    # main|big
    # main|nobig
    arrSuite=(${suite//|/ })
    suite=${arrSuite[0]}
    big=${arrSuite[1]}

    if [[ "${big}" == "big" ]]; then
        only_big_tests_this=1
        # if big tests are executed or not depends on --big-tests
    fi
    if [[ "${big}" == "nobig" ]]; then
        # if normal tests are executed or not depends on --big-tests
        big_tests_this=0
    fi

    if [[ $only_big_tests_this == "0" ]]; then
        suitesNormal+="$suite,"
    fi

    if [[ $big_tests_this == "1" ]]; then
        suitesBig+="$suite,"
    fi
done

echo "MTR normal suites: $suitesNormal"
echo "MTR big suites: $suitesBig"

start=`date +%s`

if [[ "$suitesNormal" != "" ]]; then
    suitesNormal=${suitesNormal::-1};
    suiteNoSlash="WORKER_${WORKER_NO}"
    echo "Executing normal tests for suites $suitesNormal"

    df -h
    du /dev/shm
    mount
    ls -la /dev/shm
    cat /proc/meminfo

    MTR_ARGS_NORMAL=${MTR_ARGS}

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        --suite=$suitesNormal \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_NORMAL} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${RESULTS_DIR}/junit_${suiteNoSlash}.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true

    ln -s $PWD/var $PWD/var_${suiteNoSlash}
    which rsync
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_${suiteNoSlash}

    df -h
    du -sh /dev/shm

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_NO_BIG,${suitesNormal},time,$runtime
fi

if [[ "$suitesBig" != "" ]]; then
    suitesBig=${suitesBig::-1};
    suiteNoSlash="WORKER_${WORKER_NO}"
    echo "Executing big tests for suites $suitesBig"

    MTR_ARGS_BIG=${MTR_ARGS}
    MTR_ARGS_BIG+=" --only-big-test"
    suiteNoSlash+="_bigtest"
    TESTCASE_TIMEOUT_BIG=$((TESTCASE_TIMEOUT * 2))

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        --suite=$suitesBig \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_BIG} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${RESULTS_DIR}/junit_${suiteNoSlash}.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true

    ln -s $PWD/var $PWD/var_${suiteNoSlash}
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_${suiteNoSlash}

    df -h
    du -sh /dev/shm

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,${suitesBig},time,$runtime
fi
# <<<< main MTR execution loop ends here

#
# CI FS tests
if [[ "${CI_FS_MTR}" = 'yes' ]]; then
    echo "Running CI FS tests"
    start=`date +%s`

    MTR_ARGS_CI=${MTR_ARGS}

    # no --mem allowed if vardir specified
    MTR_ARGS_CI=${MTR_ARGS_CI//"--mem"/""}

    if [[ $BIG_TEST == "1" ]]; then
        MTR_ARGS_CI+=" --big-test"
    fi

    # Collect all CI_FS tests
    CI_TESTS=$(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_case_insensitive_file_system.inc | awk -F '/' '{print $(NF-2)"."$NF}' | sed 's/\.test//g' | sed 's/^\./main/g')
    # Requested in PS-7602
    if [[ ${CMAKE_BUILD_TYPE} = 'Debug' ]]; then
        CI_TESTS+=" information_schema.i_s_schema_definition_debug"
    fi

    # Filter out disabled tests
    # Skip lines starting with #
    # Grab until whitespace or :
    DISABLED_TESTS=$(grep -P -o collections/disabled.def -e'^\s*[^#][^:\s]*')

    set +x
    for CURRENT_TEST in $DISABLED_TESTS; do
        CI_TESTS=${CI_TESTS//"$CURRENT_TEST"/""}
    done
    set -x

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --result-file \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --parallel=$PARALLEL \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_CI} \
        --tmpdir="/tmp/ps_mtr_tempdir" \
        --vardir="/tmp/ci_disk_dir/var" \
        ${CI_TESTS} \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${RESULTS_DIR}/junit_ci_fs.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.ci_fs" || true

    ln -s /tmp/ci_disk_dir/var $PWD/var_ci_fs
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_ci_fs ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_ci_fs

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,CI_FS_tests,time,$runtime
fi

# PS PROTOCOL tests
if [[ "${WITH_PS_PROTOCOL}" = 'yes' ]]; then
    echo "Running PS PROTOCOL tests"
    start=`date +%s`

    MTR_ARGS_PS=${MTR_ARGS}

    if [[ $BIG_TEST == "1" ]]; then
        MTR_ARGS_PS+=" --big-test"
    fi

    # Collect all PS_PROTOCOL tests
    PS_TESTS=$(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_ps_protocol.inc | awk -F '/' '{print $(NF-2)"."$NF}' | sed 's/\.test//g' | sed 's/^\./main/g')

    # Filter out disabled tests
    # Skip lines starting with #
    # Grab until whitespace or :
    DISABLED_TESTS=$(grep -P -o collections/disabled.def -e'^\s*[^#][^:\s]*')

    set +x
    for CURRENT_TEST in $DISABLED_TESTS; do
        PS_TESTS=${PS_TESTS//"$CURRENT_TEST"/""}
    done
    set -x

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --result-file \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --parallel=$PARALLEL \
        --ps-protocol \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_PS} \
        ${PS_TESTS} \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${RESULTS_DIR}/junit_ps_protocol.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.ps_protocol" || true

    ln -s $PWD/var $PWD/var_ps_protocol
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_ps_protocol ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_ps_protocol
    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,PS_tests,time,$runtime
fi

if [[ ${KEYRING_VAULT_MTR} == 'yes' ]]; then
    echo "Running KEYRING_VAULT tests"
    start=`date +%s`

    MTR_ARGS_KV=${MTR_ARGS}

    if [[ $BIG_TEST == "1" ]]; then
        MTR_ARGS_KV+=" --big-test"
    fi

    if [ -f /usr/bin/yum ]; then
        if [[ -f /opt/rh/httpd24/enable ]]; then
            source /opt/rh/httpd24/enable
        fi
    fi

    echo "Running tests with Hashicorp Vault in Dev mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        ${ANALYZER_MTR_ARGS} \
        --suite=component_keyring_vault \
        --junit-output=${RESULTS_DIR}/junit_keyring_vault_dev_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v1" || true

    ln -s $PWD/var $PWD/var_kv1_dev
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv1_dev ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv1_dev

    MTR_VAULT_ADDRESS=${VAULT_V2_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${RESULTS_DIR}/junit_keyring_vault_dev_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v2" || true

    ln -s $PWD/var $PWD/var_kv2_dev
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv2_dev ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv2_dev

    echo "Running tests with Hashicorp Vault in Production mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR}/cert/vault-prod-v1-ca.pem" \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${RESULTS_DIR}/junit_keyring_vault_prod_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v1" || true

    ln -s $PWD/var $PWD/var_kv1_prod
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv1_prod ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv1_prod

    MTR_VAULT_ADDRESS=${VAULT_V2_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR}/cert/vault-prod-v2-ca.pem" \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${RESULTS_DIR}/junit_keyring_vault_prod_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v2" || true

    ln -s $PWD/var $PWD/var_kv2_prod
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv2_prod ${RESULTS_DIR}/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv2_prod

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,KEYRING_VAULT_tests,time,$runtime
fi

cd ${WORKDIR}
rm -fr ${EXTRACT_DIR}/mysql-test/var
if [[ "${KEEP_BUILD}" != "yes" ]]; then
    rm -rf ${EXTRACT_DIR}
fi

tar -C ${RESULTS_DIR} --owner=0 --group=0 -czf "${RESULTS_DIR}/ps80-test-mtr_logs-${WORKER_NO}.tar.gz" mtr_var

ls -l ${WORKDIR}
ls -l ${RESULTS_DIR}
