#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      ANALYZER_OPTS = (-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_MSAN=ON -DWITH_UBSAN=ON -DWITH_VALGRIND=ON)
#      MTR_ARGS
#      MTR_REPEAT
#      MTR_SUITES
#      DOCKER_OS

set -o errexit
set -o xtrace

echo "*******************************************************"
echo "Starting tests on worker ${WORKER_NO}"
whoami
grep -c ^processor /proc/cpuinfo
free
prlimit
ulimit -a
echo "*******************************************************"

WORKDIR_ABS=$(cd ${1:-./build}; pwd -P)
SOURCEDIR=$2
rm -fr ${WORKDIR_ABS}/PS
mkdir -p ${WORKDIR_ABS}/PS/sql
tar -C ${WORKDIR_ABS}/PS --strip-components=1 -zxpf $(ls $WORKDIR_ABS/*.tar.gz | head -1)

if [[ "${SOURCEDIR}" != "" ]]; then
    # Router unit tests have hard coded paths to SOURCEDIR.
    # We link proper paths in case SOURCEDIR is not available (e.g. Jenkins docker builds).
    if ! [ -d ${SOURCEDIR}/router/tests/component/data ]; then
        sudo mkdir -p ${SOURCEDIR}/router/tests/component
        sudo ln -sf ${WORKDIR_ABS}/PS/router/tests/component/data ${SOURCEDIR}/router/tests/component
    fi
    if ! [ -d ${SOURCEDIR}/mysql-test/std_data ]; then
        sudo mkdir -p ${SOURCEDIR}/mysql-test
        sudo ln -sf ${WORKDIR_ABS}/PS/mysql-test/std_data ${SOURCEDIR}/mysql-test
    fi
fi

ln -sf ${WORKDIR_ABS}/PS/router ${WORKDIR_ABS}/router
ln -sf ${WORKDIR_ABS}/PS/unittest ${WORKDIR_ABS}/unittest
ln -sf ${WORKDIR_ABS}/PS/runtime_output_directory ${WORKDIR_ABS}/runtime_output_directory
ln -sf ${WORKDIR_ABS}/PS/plugin_output_directory ${WORKDIR_ABS}/plugin_output_directory
ln -sf ${WORKDIR_ABS}/PS/library_output_directory ${WORKDIR_ABS}/library_output_directory

cd ${WORKDIR_ABS}/PS/mysql-test
TESTCASE_TIMEOUT=30
PARALLEL=$(grep -c ^processor /proc/cpuinfo)
# CentOS 7
if [[ -f /opt/rh/devtoolset-8/enable ]]; then
    source /opt/rh/devtoolset-8/enable
fi

# TODO: This should be already there in the Docker container
if [ -f /etc/redhat-release ]; then
    RHEL=$(rpm --eval %rhel)
    if [ "$RHEL" == 8 ]; then
        pushd /etc/yum.repos.d/
        sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
        sudo sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        popd
    fi
    sudo yum install -y rsync cpanminus
    sudo cpanm --notest Expect
else
    sudo apt -y update
    sudo apt -y install rsync cpanminus
    sudo cpanm --notest Expect
fi

JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)

#
if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi
#
# we test with system jemalloc
if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
#
MTR_ARGS+=" --timestamp --report-unstable-tests"
ANALYZER_MTR_ARGS=""
#
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
  ANALYZER_MTR_ARGS+=" --valgrind --valgrind-clients --valgrind-option=--leak-check=full --valgrind-option=--show-leak-kinds=all"
  TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
  if [[ ${PARALLEL} -gt 1 ]]; then
    PARALLEL=$((PARALLEL/3))
  fi
fi

# hack for too big instances ;)
if [[ ${PARALLEL} -gt 10 ]]; then
  echo "Limit parallel ${PARALLEL} -> 10"
  PARALLEL=10
fi

if [[ "${ANALYZER_OPTS}" == *WITH_*SAN*=ON* ]]; then
    ANALYZER_MTR_ARGS+=" --sanitize"
fi

MTR_ARGS+=${ANALYZER_MTR_ARGS}

if [[ "${ANALYZER_OPTS}" == *WITH_ASAN=ON* ]]; then
  export ASAN_OPTIONS=allocator_may_return_null=true
  # trying to find the proper library
  MYSQLD=$(find ${WORKDIR_ABS}/PS/bin -name mysqld)
  LIBASAN=$(ldd ${MYSQLD} | grep libasan | awk '{print $3}')
  ADD_TO_LD_PRELOAD="${LIBASAN}:"
fi

if [[ -n "${MTR_REPEAT}" ]]; then
  MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_ARGS}" == *"--suite=max_parts"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 3))
fi

#
# force to use mecab everywhere (except RHEL)
if [[ ! -e /etc/redhat-release ]]; then
    MTR_ARGS+=" --mysqld=--loose-mecab-rc-file=/etc/mecabrc"
fi
#

if [[ $MTR_ARGS == *"--big-test"* ]] || [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi

#
# execute big tests in separate run
BIG_TEST=0
ONLY_BIG_TEST=0
if [[ $MTR_ARGS == *"--big-test"* ]]; then
    BIG_TEST=1
fi
if [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    ONLY_BIG_TEST=1
    BIG_TEST=1
fi
MTR_ARGS=${MTR_ARGS//"--big-test"/""}
MTR_ARGS=${MTR_ARGS//"--only-big-test"/""}

#
# unit tests
UNIT_TESTS=0
if [[ $MTR_ARGS == *"--unit-tests-report"* ]]; then
    UNIT_TESTS=1
fi
MTR_ARGS=${MTR_ARGS//"--unit-tests-report"/""}

#
# Running MTR test cases

status=0
#
# Running MTR test cases
if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
else
    MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
fi

ARRAY_MTR_SUITES=($(echo $MTR_SUITES | sed 's/,/ /g'))
# >>>> main MTR execution loop starts here
for suite in "${ARRAY_MTR_SUITES[@]}"; do
    only_big_tests_this=$ONLY_BIG_TEST
    big_tests_this=$BIG_TEST

    # suite may be in form:
    # main
    # main|big
    # main|nobig
    arrSuite=(${suite//|/ })
    suite=${arrSuite[0]}
    big=${arrSuite[1]}

    if [[ "${big}" == "big" ]]; then
        only_big_tests_this=1
        # if big tests are executed or not depends on --big-tests
    fi
    if [[ "${big}" == "nobig" ]]; then
        # if normal tests are executed or not depends on --big-tests
        big_tests_this=0
    fi

    if [[ $only_big_tests_this == "0" ]]; then
        suitesNormal+="$suite,"
    fi

    if [[ $big_tests_this == "1" ]]; then
        suitesBig+="$suite,"
    fi
done

echo "Running MTR normal suites: $suitesNormal"
echo "Running MTR big suites: $suitesBig"

start=`date +%s`

if [[ "$suitesNormal" != "" ]]; then
    suitesNormal=${suitesNormal::-1};
    suiteNoSlash="WORKER_${WORKER_NO}"
    echo "Executing normal tests for suites $suitesNormal"

    df -h
    du /dev/shm
    mount
    ls -la /dev/shm
    cat /proc/meminfo

    MTR_ARGS_NORMAL=${MTR_ARGS}

    if [[ $UNIT_TESTS == "1" ]]; then
        MTR_ARGS_NORMAL+=" --unit-tests-report"
        UNIT_TESTS=0
    fi

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        --suite=$suitesNormal \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_NORMAL} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${WORKDIR_ABS}/junit_${suiteNoSlash}.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true

    ln -s $PWD/var $PWD/var_${suiteNoSlash}
    which rsync
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} $PWD/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_${suiteNoSlash}

    df -h
    du -sh /dev/shm

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_NO_BIG,${suitesNormal},time,$runtime
fi

if [[ "$suitesBig" != "" ]]; then
    suitesBig=${suitesBig::-1};
    suiteNoSlash="WORKER_${WORKER_NO}"
    echo "Executing big tests for suites $suitesBig"

    MTR_ARGS_BIG=${MTR_ARGS}
    MTR_ARGS_BIG+=" --only-big-test"
    suiteNoSlash+="_bigtest"
    TESTCASE_TIMEOUT_BIG=$((TESTCASE_TIMEOUT * 2))

    if [[ $UNIT_TESTS == "1" ]]; then
        MTR_ARGS_BIG+=" --unit-tests-report"
        UNIT_TESTS=0
    fi

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --parallel=${PARALLEL} \
        --result-file \
        --suite=$suitesBig \
        --suite-timeout=9999 \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_BIG} \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --junit-output=${WORKDIR_ABS}/junit_${suiteNoSlash}.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suiteNoSlash}" || true

    ln -s $PWD/var $PWD/var_${suiteNoSlash}
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_${suiteNoSlash} $PWD/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_${suiteNoSlash}

    df -h
    du -sh /dev/shm

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,${suitesBig},time,$runtime
fi
# <<<< main MTR execution loop ends here

#
# CI FS tests
if [[ "${CI_FS_MTR}" = 'yes' ]]; then
    echo "Running CI FS tests"
    start=`date +%s`

    MTR_ARGS_CI=${MTR_ARGS}

    if [[ $UNIT_TESTS == "1" ]]; then
        MTR_ARGS_CI+=" --unit-tests-report"
        UNIT_TESTS=0
    fi
    # no --mem allowed if vardir specified
    MTR_ARGS_CI=${MTR_ARGS_CI//"--mem"/""}

    if [[ $BIG_TEST == "1" ]]; then
        MTR_ARGS_CI+=" --big-test"
    fi

    # Collect all CI_FS tests
    CI_TESTS=$(grep --exclude="*.inc" --exclude="*.log" -rl . -e include/have_case_insensitive_file_system.inc | awk -F '/' '{print $(NF-2)"."$NF}' | sed 's/\.test//g' | sed 's/^\./main/g')
    # Requested in PS-7602
    if [[ ${CMAKE_BUILD_TYPE} = 'Debug' ]]; then
        CI_TESTS+=" information_schema.i_s_schema_definition_debug"
    fi

    # Filter out disabled tests
    # Skip lines starting with #
    # Grab until whitespace or :
    DISABLED_TESTS=$(grep -P -o collections/disabled.def -e'^\s*[^#][^:\s]*')

    set +x
    for CURRENT_TEST in $DISABLED_TESTS; do
        CI_TESTS=${CI_TESTS//"$CURRENT_TEST"/""}
    done
    set -x

    MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
        --result-file \
        --force --mysqld-env="LD_PRELOAD=${MYSQLD_ENV}" \
        --max-test-fail=0 \
        --suite-timeout=9999 \
        --parallel=$PARALLEL \
        --testcase-timeout=${TESTCASE_TIMEOUT} \
        ${MTR_ARGS_CI} \
        --tmpdir="/tmp/ps_mtr_tempdir" \
        --vardir="/tmp/ci_disk_dir/var" \
        ${CI_TESTS} \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_ci_fs.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.ci_fs" || true

        ln -s /tmp/ci_disk_dir/var $PWD/var_ci_fs
        rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_ci_fs $PWD/mtr_var

        killall -9 mysqld || true
        rm -rf $PWD/var_ci_fs

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,CI_FS_tests,time,$runtime
fi

if [[ ${KEYRING_VAULT_MTR} == 'yes' ]]; then
    echo "Running KEYRING_VAULT tests"
    start=`date +%s`

    MTR_ARGS_KV=${MTR_ARGS}

    if [[ $UNIT_TESTS == "1" ]]; then
        MTR_ARGS_KV+=" --unit-tests-report"
        UNIT_TESTS=0
    fi

    if [[ $BIG_TEST == "1" ]]; then
        MTR_ARGS_KV+=" --big-test"
    fi

    if [ -f /usr/bin/yum ]; then
        if [[ -f /opt/rh/httpd24/enable ]]; then
            source /opt/rh/httpd24/enable
        fi
    fi

    echo "Running tests with Hashicorp Vault in Dev mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        ${ANALYZER_MTR_ARGS} \
        --suite=component_keyring_vault \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v1" || true

    ln -s $PWD/var $PWD/var_kv1_dev
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv1_dev $PWD/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv1_dev

    MTR_VAULT_ADDRESS=${VAULT_V2_DEV_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_DEV_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_DEV_MTR_TOKEN} \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_dev_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_dev_v2" || true

    ln -s $PWD/var $PWD/var_kv2_dev
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv2_dev $PWD/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv2_dev

    echo "Running tests with Hashicorp Vault in Production mode"
    MTR_VAULT_ADDRESS=${VAULT_V1_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V1_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V1_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/vault-prod-v1-ca.pem" \
    MTR_VAULT_VERSION=1 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v1.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v1" || true

    ln -s $PWD/var $PWD/var_kv1_prod
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv1_prod $PWD/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv1_prod

    MTR_VAULT_ADDRESS=${VAULT_V2_PROD_ADDRESS} \
    MTR_VAULT_ADMIN_TOKEN=${VAULT_V2_PROD_ROOT_TOKEN} \
    MTR_VAULT_PLUGIN_TOKEN=${VAULT_V2_PROD_MTR_TOKEN} \
    MTR_VAULT_CA="${WORKDIR_ABS}/vault-prod-v2-ca.pem" \
    MTR_VAULT_VERSION=2 \
    MTR_BUILD_THREAD=auto ./mtr \
        --force \
        --max-test-fail=0 \
        --parallel=$PARALLEL \
        --retry=0 \
        ${MTR_ARGS_KV} \
        --suite=component_keyring_vault \
        ${ANALYZER_MTR_ARGS} \
        --junit-output=${WORKDIR_ABS}/junit_keyring_vault_prod_v2.xml \
        --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.keyring_vault_prod_v2" || true

    ln -s $PWD/var $PWD/var_kv2_prod
    rsync -a -L --prune-empty-dirs --include '*/' --include '*.err' --exclude '*' $PWD/var_kv2_prod $PWD/mtr_var

    killall -9 mysqld || true
    rm -rf $PWD/var_kv2_prod

    end=`date +%s`
    runtime=$((end-start))
    echo KH,SUITE_TOTAL,KEYRING_VAULT_tests,time,$runtime
fi

exit $status
