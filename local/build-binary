#!/bin/bash

set -o errexit
set -o xtrace


# ------------------------------------------------------------------------------
# Declare all input variables
# ------------------------------------------------------------------------------
JOB_CMAKE=${JOB_CMAKE:-cmake}
COMPILER=${COMPILER:-default}
CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-RelWithDebInfo}
WITHOUT_TOKUDB=${WITHOUT_TOKUDB:-OFF}
WITH_EMBEDDED_SERVER=${WITH_EMBEDDED_SERVER:-ON}
WITH_SSL=${WITH_SSL:-system}
PERFSCHEMA_OPTS=${PERFSCHEMA_OPTS:-}
ANALYZER_OPTS=${ANALYZER_OPTS:-}
MAKE_OPTS=${MAKE_OPTS:--j$(grep -c ^processor /proc/cpuinfo)}
CMAKE_OPTS=${CMAKE_OPTS:-}
BUILD_COMMENT=${BUILD_COMMENT:-}
TAG=${TAG:-}
DIST_NAME=${DIST_NAME:-}
SSL_VER=${SSL_VER:-}
TARGET_CFLAGS=${TARGET_CFLAGS:-}


# ------------------------------------------------------------------------------
# set working dir
# ------------------------------------------------------------------------------
mkdir -p ${1:-./build}
WORKDIR=$(cd ${1:-./build}; pwd -P)
INSTALL_DIR=${WORKDIR}/DESTDIR
DOWNLOAD_DIR=${WORKDIR}/source_downloads
mkdir -p ${INSTALL_DIR} ${DOWNLOAD_DIR}
SOURCEDIR=$(cd ${2:-$(dirname $0)/../sources}; pwd -P)


# ------------------------------------------------------------------------------
# download external libs
# ------------------------------------------------------------------------------
wget_loop() {
    local FILE="$1"
    local URL="$2"

    if [[ ! -f "${DOWNLOAD_DIR}/${FILE}" ]]; then
        until wget --progress=dot:giga -O "${DOWNLOAD_DIR}/${FILE}" "${URL}"; do
            echo "sleep before retry"
            sleep 1
        done
    fi
}
GMOCK_VERSION=$(grep 'SET(GMOCK_PACKAGE_NAME' ${SOURCEDIR}/unittest/gunit/CMakeLists.txt | sed -re 's/.*([0-9]+[.][0-9]+[.][0-9]+).*/\1/')
wget_loop "googletest-release-${GMOCK_VERSION}.zip" "https://github.com/google/googletest/archive/release-${GMOCK_VERSION}.zip"


# ------------------------------------------------------------------------------
# Set OS/Arch flags
# ------------------------------------------------------------------------------
if [[ "$(getconf LONG_BIT)" = "32" ]]; then
    TARGET_ARCH="i686"
    TARGET_CFLAGS+=" -m32 -march=i686"
    WITHOUT_TOKUDB=ON
else
    TARGET_ARCH="$(uname -m)"
fi


# ------------------------------------------------------------------------------
# Set Debug options
# ------------------------------------------------------------------------------
if [[ "${CMAKE_BUILD_TYPE}" = "Debug" ]]; then
    BUILD_COMMENT+="-debug"
    CMAKE_OPTS+=" -DDEBUG_EXTNAME=OFF"
fi
if [[ "${ANALYZER_OPTS}" = *WITH_VALGRIND=ON* ]]; then
    BUILD_COMMENT+="-valgrind"
fi
if [[ "$(lsb_release -d -s)" = *"CentOS release 6."* ]] && [[ "${CMAKE_BUILD_TYPE}" = "RelWithDebInfo" ]]; then
    MYSQL_MAINTAINER_MODE="OFF"
else
    MYSQL_MAINTAINER_MODE="ON"
fi


# ------------------------------------------------------------------------------
# set version
# ------------------------------------------------------------------------------
source "$SOURCEDIR/VERSION"
if [[ -n "$(which git)" ]] && [[ -d "$SOURCEDIR/.git" ]]; then
    REVISION="$(cd "$SOURCEDIR"; git rev-parse --short HEAD)"
fi
MYSQL_VERSION="$MYSQL_VERSION_MAJOR.$MYSQL_VERSION_MINOR.$MYSQL_VERSION_PATCH"
PERCONA_SERVER_VERSION="$(echo $MYSQL_VERSION_EXTRA | sed 's/^-//')"
PRODUCT="Percona-Server-$MYSQL_VERSION-$PERCONA_SERVER_VERSION"
TOKUDB_BACKUP_VERSION="${MYSQL_VERSION}${MYSQL_VERSION_EXTRA}"
PRODUCT_FULL="Percona-Server-${MYSQL_VERSION}-${PERCONA_SERVER_VERSION}${BUILD_COMMENT}-${TAG}$(uname -s)${DIST_NAME}.${TARGET_ARCH}${SSL_VER}"
COMMENT="Percona Server (GPL), Release ${MYSQL_VERSION_EXTRA#-}, Revision ${REVISION:-}${BUILD_COMMENT}"


# ------------------------------------------------------------------------------
# Set compile options
# ------------------------------------------------------------------------------
if [[ "$COMPILER" != "default" ]]; then
    export CC=${COMPILER}
    export CXX=$(echo ${COMPILER} | sed -e 's/gcc/g++/; s/clang/clang++/')
else
    export CC=gcc
    export CXX=g++
fi

# CentOS 6 & 7
if [[ -f /opt/rh/devtoolset-7/enable ]]; then
    source /opt/rh/devtoolset-7/enable
fi


# ------------------------------------------------------------------------------
# Check tokudb
# ------------------------------------------------------------------------------
if [[ "${WITHOUT_TOKUDB}" = "OFF" ]]; then
    CMAKE_OPTS+=" -DBUILD_TESTING=OFF -DUSE_GTAGS=OFF -DUSE_CTAGS=OFF -DUSE_ETAGS=OFF -DUSE_CSCOPE=OFF -DTOKUDB_BACKUP_PLUGIN_VERSION=${TOKUDB_BACKUP_VERSION}"
    if [[ "${CMAKE_BUILD_TYPE}" = "Debug" ]]; then
        CMAKE_OPTS+=" -DTOKU_DEBUG_PARANOID=ON"
    else
        CMAKE_OPTS+=" -DTOKU_DEBUG_PARANOID=OFF"
    fi
    if [[ "${ANALYZER_OPTS}" = *WITH_VALGRIND=ON* ]]; then
        CMAKE_OPTS+=" -DUSE_VALGRIND=ON"
    fi
fi


# ------------------------------------------------------------------------------
# Finaly, compile!
# ------------------------------------------------------------------------------
pushd ${WORKDIR}
    ${JOB_CMAKE} \
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
        -DWITHOUT_TOKUDB=${WITHOUT_TOKUDB} \
        -DWITH_EMBEDDED_SERVER=${WITH_EMBEDDED_SERVER} \
        -DWITH_SSL=${WITH_SSL} \
        -DBUILD_CONFIG=mysql_release \
        -DFEATURE_SET=community \
        -DENABLE_DTRACE=OFF \
        -DWITH_PAM=ON \
        -DWITH_SCALABILITY_METRICS=ON \
        -DWITH_NUMA=ON \
        -DWITH_INNODB_MEMCACHED=ON \
        -DENABLE_DOWNLOADS=ON \
        -DDOWNLOAD_ROOT=${DOWNLOAD_DIR} \
        -DWITH_ZLIB=system \
        -DCMAKE_INSTALL_PREFIX=/usr/local/$PRODUCT_FULL \
        -DMYSQL_DATADIR=/usr/local/$PRODUCT_FULL/data \
        -DCOMPILATION_COMMENT="$COMMENT" \
        -DMYSQL_MAINTAINER_MODE=${MYSQL_MAINTAINER_MODE} \
        ${TARGET_CFLAGS:+-DCMAKE_C_FLAGS="${TARGET_CFLAGS}" -DCMAKE_CXX_FLAGS="${TARGET_CFLAGS}"} \
        ${PERFSCHEMA_OPTS} \
        ${ANALYZER_OPTS} \
        ${CMAKE_OPTS} \
        ${SOURCEDIR}
    make ${MAKE_OPTS}
    make DESTDIR=${INSTALL_DIR} install > make_install.log
popd

tar -C ${INSTALL_DIR}/usr/local --owner=0 --group=0 -czf "${WORKDIR}/$PRODUCT_FULL.tar.gz" $PRODUCT_FULL
