#!/bin/bash

set -o errexit
set -o xtrace

# Test Percona Server build using Docker image from "public.ecr.aws/e7j3v3n0/ps-build"
#
# usage:
#   ./docker/run-test-parallel-mtr [Docker-OS] [Worker-Number] [Work-Dir]
#
# example:
#   cd ps-build
#   ./local/checkout
#   ./docker/run-build ubuntu:jammy
#   ./docker/run-test-parallel-mtr ubuntu:jammy

# decides if keep original build files or just ".tar.gz" archive
KEEP_BUILD=${KEEP_BUILD:-no}

DOCKER_OS=${1:-ubuntu:jammy}
SOURCE_IMAGE=${DOCKER_OS//:/-}
WORKER_NO=${2:-0}

ROOT_DIR=$(cd $(dirname $0)/..; pwd -P)
SCRIPTS_DIR=$ROOT_DIR/local
# SOURCES_DIR is only required by an original build in ${WORK_DIR}/build to run unit tests
SOURCES_DIR=$ROOT_DIR/sources
mkdir -p ${SOURCES_DIR}

WORK_DIR=${3:-$ROOT_DIR/${SOURCE_IMAGE}_${CMAKE_BUILD_TYPE}}
ls -l ${ROOT_DIR}
ls -l ${WORK_DIR}

ARCHIVE_FILE=$(ls ${WORK_DIR}/*.tar.gz | head -1)
if [[ "${ARCHIVE_FILE}" == "" ]]; then
    echo "Can't find Percona Server build in ${WORK_DIR}/*.tar.gz"
    exit 1
fi

if [[ ${CI_FS_MTR} == 'yes' ]]; then
    CI_FS_DOCKER_FLAG="--mount type=bind,source=/mnt/ci_disk_dir_${CMAKE_BUILD_TYPE},destination=/tmp/ci_disk_dir"
fi

if [[ "${KEYRING_VAULT_MTR}" == 'yes' ]]; then
    if [[ $(docker network list | grep bridge-vault) != *bridge-vault* ]]; then
        docker network create bridge-vault
    fi

    # Bootstrap dev mode vault instances
    BOOTSTRAP_DEV_V1="$(bash $SCRIPTS_DIR/bootstrap-vault --mode=dev --version="${KEYRING_VAULT_V1_VERSION}" --alias=v1 --port="9200" --devtoken=${VAULT_V1_DEV_ROOT_TOKEN})"
    export VAULT_V1_DEV_MTR_TOKEN=$(echo "$BOOTSTRAP_DEV_V1" | grep "MTR token" | awk -F ':' '{print $2}' | xargs)

    BOOTSTRAP_DEV_V2="$(bash $SCRIPTS_DIR/bootstrap-vault --mode=dev --version="${KEYRING_VAULT_V2_VERSION}" --alias=v2 --port="9400" --devtoken=${VAULT_V2_DEV_ROOT_TOKEN})"
    export VAULT_V2_DEV_MTR_TOKEN=$(echo "$BOOTSTRAP_DEV_V2" | grep "MTR token" | awk -F ':' '{print $2}' | xargs)

    # Bootstrap prod mode vault instances
    BOOTSTRAP_PROD_V1="$(bash $SCRIPTS_DIR/bootstrap-vault --mode=prod --version="${KEYRING_VAULT_V1_VERSION}" --alias=v1 --port="9300")"
    export VAULT_V1_PROD_ROOT_TOKEN=$(echo "$BOOTSTRAP_PROD_V1" | grep "Production token" | awk -F ':' '{print $2}' | xargs)
    export VAULT_V1_PROD_MTR_TOKEN=$(echo "$BOOTSTRAP_PROD_V1" | grep "MTR token" | awk -F ':' '{print $2}' | xargs)
    mkdir -p ${WORK_DIR}/cert
    sudo install --owner=1001 --group=1001 /tmp/vault.d-v1-prod/ssl/ca.pem ${WORK_DIR}/cert/vault-prod-v1-ca.pem

    BOOTSTRAP_PROD_V2="$(bash $SCRIPTS_DIR/bootstrap-vault --mode=prod --version="${KEYRING_VAULT_V2_VERSION}" --alias=v2 --port="9500")"
    export VAULT_V2_PROD_ROOT_TOKEN=$(echo "$BOOTSTRAP_PROD_V2" | grep "Production token" | awk -F ':' '{print $2}' | xargs)
    export VAULT_V2_PROD_MTR_TOKEN=$(echo "$BOOTSTRAP_PROD_V2" | grep "MTR token" | awk -F ':' '{print $2}' | xargs)
    sudo install --owner=1001 --group=1001 /tmp/vault.d-v2-prod/ssl/ca.pem ${WORK_DIR}/cert/vault-prod-v2-ca.pem

    VAULT_DOCKER_FLAG="--network bridge-vault"
fi

docker run --rm --shm-size=32G \
    --tmpfs /dev/shm:rw,exec,size=32G \
    --security-opt seccomp=unconfined \
    --sysctl net.ipv6.conf.lo.disable_ipv6=0 \
    --mount type=bind,source=${SOURCES_DIR},destination=/tmp/sources \
    --mount type=bind,source=${SCRIPTS_DIR},destination=/tmp/scripts \
    --mount type=bind,source=${WORK_DIR},destination=/tmp/work \
    ${CI_FS_DOCKER_FLAG} \
    ${VAULT_DOCKER_FLAG} \
    public.ecr.aws/e7j3v3n0/ps-build:${SOURCE_IMAGE} \
    sh -c "
    set -o errexit
    set -o xtrace

    mkdir /tmp/ps_mtr_tempdir
    export CMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'
    export ANALYZER_OPTS='${ANALYZER_OPTS}'
    export MTR_ARGS='${MTR_ARGS}'
    export MTR_REPEAT='${MTR_REPEAT}'
    export MTR_SUITES='${MTR_SUITES}'
    export CI_FS_MTR='${CI_FS_MTR}'
    export WITH_PS_PROTOCOL='${WITH_PS_PROTOCOL}'
    export KEYRING_VAULT_MTR='${KEYRING_VAULT_MTR}'
    export WORKER_NO='${WORKER_NO}'
    export VAULT_V1_DEV_ADDRESS='http://vault-dev-v1:9200'
    export VAULT_V2_DEV_ADDRESS='http://vault-dev-v2:9400'
    export VAULT_V1_PROD_ADDRESS='https://vault-prod-v1:9300'
    export VAULT_V2_PROD_ADDRESS='https://vault-prod-v2:9500'
    export VAULT_V1_DEV_ROOT_TOKEN='${VAULT_V1_DEV_ROOT_TOKEN}'
    export VAULT_V2_DEV_ROOT_TOKEN='${VAULT_V2_DEV_ROOT_TOKEN}'
    export VAULT_V1_DEV_MTR_TOKEN='${VAULT_V1_DEV_MTR_TOKEN}'
    export VAULT_V2_DEV_MTR_TOKEN='${VAULT_V2_DEV_MTR_TOKEN}'
    export VAULT_V1_PROD_ROOT_TOKEN='${VAULT_V1_PROD_ROOT_TOKEN}'
    export VAULT_V2_PROD_ROOT_TOKEN='${VAULT_V2_PROD_ROOT_TOKEN}'
    export VAULT_V1_PROD_MTR_TOKEN='${VAULT_V1_PROD_MTR_TOKEN}'
    export VAULT_V2_PROD_MTR_TOKEN='${VAULT_V2_PROD_MTR_TOKEN}'
    export DOCKER_OS='${SOURCE_IMAGE}'
    export WITH_ROCKSDB='${WITH_ROCKSDB}'
    export KEEP_BUILD='${KEEP_BUILD}'

    sudo chown mysql:mysql /tmp/work
    sudo chown -R mysql:mysql /tmp/work/results || :

    bash -x /tmp/scripts/test-binary-parallel-mtr /tmp/work/

    sudo chown -R $(id -u):$(id -g) /tmp/work/results
" 2>&1 | tee ${WORK_DIR}/mtr_test.log
